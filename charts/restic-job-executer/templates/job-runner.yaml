apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "job-executer.fullname" . }}
  labels:
    {{- include "job-executer.labels" . | nindent 4 }}
spec:
  schedule: "{{ .Values.schedule }}"
  suspend: {{ .Values.suspend }}
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      template:
        metadata:
          name: {{ include "job-executer.fullname" . }}
          labels:
          {{- include "job-executer.labels" . | nindent 12 }}
        spec:
          restartPolicy: Never
          {{- with .Values.imagePullSecrets }}
          imagePullSecrets:
          {{- toYaml . | nindent 16 }}
          {{- end }}
          serviceAccountName: {{ include "job-executer.serviceAccountName" . }}
          securityContext:
          {{- toYaml .Values.podSecurityContext | nindent 16 }}
          containers:
          - name: {{ .Chart.Name }}
            securityContext:
              {{- toYaml .Values.securityContext | nindent 16 }}
            image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
            imagePullPolicy: {{ .Values.image.pullPolicy }}
            command:
            - /bin/bash
            args:
            - -c
            - echo "export $(echo $ENVFILE|grep -v '^#'| xargs);" > /tmp/command.sh && echo $B64_JOB_SCRIPT | perl -MMIME::Base64 -ne 'printf "%s\n",decode_base64($_)' >> /tmp/command.sh && kubectl exec $(kubectl get pods --selector=$SELECTOR -o jsonpath='{.items[0].metadata.name}') {{- if .Values.containerSelector }} -c {{ .Values.containerSelector }} {{- end}} -- bash -c "`cat /tmp/command.sh`"
            env:
            - name: SELECTOR
              value: app.kubernetes.io/instance={{.Values.chartReleaseSelector}},app.kubernetes.io/name={{.Values.chartSelector}}
            - name: ENVFILE
              value: |-
                NAMESPACE={{.Release.Namespace}}
                CONTEXT={{.Values.context}}
                RESTIC_PASSWORD={{.Values.restic.password}}
                RESTIC_REPOSITORY={{.Values.restic.repository}}
                RESTIC_CACHE_DIR=/tmp/restic
                AWS_ACCESS_KEY_ID={{.Values.restic.awsAccessKeyId}}
                AWS_SECRET_ACCESS_KEY={{.Values.restic.awsSecretAccessKey}}
                {{- if .Values.extraEnvFile }}
                {{- .Values.extraEnvFile | nindent 16 }}
                {{- end }}
            - name: B64_JOB_SCRIPT
              value: {{ include "common.tplvalues.render" (dict "value" .Values.customBackupCommand "context" $) | b64enc }}